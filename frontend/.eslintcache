[{"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/index.js":"1","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/App.js":"2","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Register.js":"3","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Home.js":"4","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Leaderboard.js":"5","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Quiz.js":"6","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Login.js":"7","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Nav.js":"8","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/QuizSetup.js":"9","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Timer.js":"10"},{"size":175,"mtime":1610539764887,"results":"11","hashOfConfig":"12"},{"size":869,"mtime":1610707226632,"results":"13","hashOfConfig":"12"},{"size":1643,"mtime":1610707520403,"results":"14","hashOfConfig":"12"},{"size":173,"mtime":1610539764882,"results":"15","hashOfConfig":"12"},{"size":1326,"mtime":1610707166658,"results":"16","hashOfConfig":"12"},{"size":170,"mtime":1610710157168,"results":"17","hashOfConfig":"12"},{"size":1617,"mtime":1610707226633,"results":"18","hashOfConfig":"12"},{"size":774,"mtime":1610707226633,"results":"19","hashOfConfig":"12"},{"size":6460,"mtime":1610713478741,"results":"20","hashOfConfig":"12"},{"size":1759,"mtime":1610714008959,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"159hsjc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/index.js",[],["45","46"],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/App.js",[],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Register.js",[],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Home.js",[],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Leaderboard.js",["47"],"import React, { Component } from \"react\";\nimport \"./Leaderboard.css\";\nimport axios from \"axios\";\n\nclass Leaderboard extends Component {\n  \n  state = {\n    scores: [\n      { name: \"Sam\", score: 8, time: 120 },\n      { name: \"Rose\",score: 10,time: 140 },\n      { name: \"Lhia\", score: 5, time: 180 },\n      { name: \"Mike\", score: 5, time: 140 },\n      { name: \"Dan\", score: 10, time: 135 },\n    ],\n  };\n\n  //Using component did mount here so that I can manipulate some data before I render it to the screen.\n  componentDidMount() {\n    //Take the data from state and store it in a variable so that I can manipulate it\n    let data = this.state.scores;\n\n    let sorted = data.sort((a, b)=> {\n      return b.score - a.score || a.time - b.time;\n    });\n    //I use this new sorted value and set it to state ready for the render\n    this.setState({ scores: sorted });\n  }\n  render() {\n    const { scores } = this.state;\n    return (\n      <div className=\"main\">\n        <h1>Leaderboard</h1>\n        {/* Map through the already sorted array that lives in state */}\n        {scores.map((person) => {\n          return (\n            <div>\n              <p>\n                {person.name} - {person.score} - {person.time}\n              </p>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\nexport default Leaderboard;\n","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Quiz.js",[],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Login.js",[],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Nav.js",[],"/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/QuizSetup.js",["48","49","50","51"],"import './QuizSetup.css';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport Timer from \"./Timer\"\n\nconst QuizSetup = () => {\n    const [categories, setCategories] = useState([]);\n    const [difficulty, setDifficulty] = useState([\"easy\", \"medium\", \"hard\"]);\n    const [selectedDifficulty, setSelectedDifficulty] = useState(\"\");\n    const [backendResponse, setbackendResponse] = useState(\"\");\n    const [categorySelected, setCategorySelected] = useState(false);\n    const [difficultySelected, setDifficultySelected] = useState(false);\n    const [category, setCategory] = useState(\"\");\n    const [quizQuestions, setQuizQuestions] = useState([]);\n    const [answer, setAnswer] = useState(\"\");\n    const [question, setQuestion] = useState(1);\n\n    const fetchData = async () => {\n        //body/headers not required when accessing own backend\n        const response = await axios.get('https://opentdb.com/api_category.php')\n        setCategories(response.data.trivia_categories);\n    }\n\n    //will run once when the page has loaded\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const formHandler = async (event, page) => {\n        //this prevents the reloading of the page\n        event.preventDefault();\n        if (page === \"category\") {\n            setCategorySelected(true);\n        } else if (page === \"difficulty\") {\n            setDifficultySelected(true);\n            const response = await axios.get(`https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${selectedDifficulty}&type=multiple`)\n            setQuizQuestions(response.data.results);\n        }\n\n        //create a data object to pass through axios (like node)\n        const body = {\n            category: category,\n        }\n\n        // tell the browser what type of content is being passed from frontend to backend\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        // pass the data & the config to the back end - axios.post will return a response\n        // from our back end\n        const response = await axios.post(`/quizsetup/${page}`, body, config);\n        //response is an object\n        setbackendResponse(response.data.response);\n    }\n\n    const answerHandler = (event) => {\n        event.preventDefault();\n        console.log(answer);\n    }\n\n    const shuffle = (array) => {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n    if (!categorySelected) {\n        return (\n            <div>\n                <h1>Quiz Setup</h1>\n                <div className=\"categories\">\n                    {\n                        shuffle(categories).slice(0, 9).map((category, i) => {\n                            //categories with extra long names causing issues with the size of the box\n                            if (category.name.includes(\"Entertainment\")) {\n                                category.name = category.name.replace(\"Entertainment: \", \"\")\n                            }\n                            return (\n                                <form key={i} className=\"category\" onSubmit={(e) => formHandler(e, \"category\")}>\n                                    <button type=\"submit\" name=\"category\" value={category.id} onClick={(e) => { setCategory(e.target.value) }} >{category.name}</button>\n                                </form>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        );\n    } else if (!difficultySelected) {\n        return (\n            <div>\n                <h1>Select Difficulty</h1>\n                <div className=\"difficulty\">\n                    {\n                        difficulty.map((difficulty, i) => {\n                            return (\n                                <form key={i} className=\"difficulty\" onSubmit={(e) => formHandler(e, \"difficulty\")}>\n                                    <button type=\"submit\" name=\"difficulty\" value={difficulty} onClick={(e) => { setSelectedDifficulty(e.target.value) }} >{difficulty}</button>\n                                </form>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <h1>Quiz</h1>\n                <Timer />\n                {   \n                    quizQuestions.map((question, i) => {\n                        let newArray = [question.correct_answer, question.incorrect_answers[0], question.incorrect_answers[1], question.incorrect_answers[2]];\n                        let shuffledArray = shuffle(newArray);\n                        return (\n                            <div key={i} className=\"question\" id={\"question\" + i}>\n                                <h2>{question.question}</h2>\n                                <form className=\"answers\" onSubmit={(e) => answerHandler(e)}>\n                                    <button className=\"answer\" id=\"answer1\" type=\"submit\" value={shuffledArray[0]} onClick={(e) => { setAnswer(e.target.value) }}>{shuffledArray[0]}</button>\n                                    <button className=\"answer\" id=\"answer2\" type=\"submit\" value={shuffledArray[1]} onClick={(e) => { setAnswer(e.target.value) }}>{shuffledArray[1]}</button>\n                                    <button className=\"answer\" id=\"answer3\" type=\"submit\" value={shuffledArray[2]} onClick={(e) => { setAnswer(e.target.value) }}>{shuffledArray[2]}</button>\n                                    <button className=\"answer\" id=\"answer4\" type=\"submit\" value={shuffledArray[3]} onClick={(e) => { setAnswer(e.target.value) }}>{shuffledArray[3]}</button>\n                                </form>\n                                \n                            </div>\n                        )\n                    })\n                }<div>\n                    \n                </div>\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default QuizSetup;\n","/Users/lhiag/Desktop/codenation/week10/quiz project/quiz-app/frontend/src/components/Timer.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":13},{"ruleId":"56","severity":1,"message":"60","line":8,"column":24,"nodeType":"58","messageId":"59","endLine":8,"endColumn":37},{"ruleId":"56","severity":1,"message":"61","line":10,"column":12,"nodeType":"58","messageId":"59","endLine":10,"endColumn":27},{"ruleId":"56","severity":1,"message":"62","line":16,"column":12,"nodeType":"58","messageId":"59","endLine":16,"endColumn":20},{"ruleId":"56","severity":1,"message":"63","line":16,"column":22,"nodeType":"58","messageId":"59","endLine":16,"endColumn":33},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'setDifficulty' is assigned a value but never used.","'backendResponse' is assigned a value but never used.","'question' is assigned a value but never used.","'setQuestion' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]